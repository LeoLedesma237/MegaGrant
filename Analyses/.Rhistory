rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(Condition)
abs_df
filter(abs_dfm ID == 10027)
filter(abs_df, ID == 10027)
abs_df <- filter(Both_C, PowerType == "abs") %>% arrange(ID)
psd_df <- filter(Both_C, PowerType == "psd") %>% arrange(ID)
rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(ID)
abs_df
names(abs_df)
Anova(abs_mod, type = "III")
abs_df <- filter(Both_C, PowerType == "abs") %>% arrange(ID)
psd_df <- filter(Both_C, PowerType == "psd") %>% arrange(ID)
rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(ID)
### Preliminary analysis ...
abs_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = abs_df,
family = Gamma(link = "log"))
psd_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = psd_df,
family = Gamma(link = "log"))
psd_df\
psd_df
Both_C$PowerType
abs_df <- filter(Both_C, PowerType == "abs") %>% arrange(ID)
psd_df <- filter(Both_C, PowerType == "avg") %>% arrange(ID)
rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(ID)
### Preliminary analysis ...
abs_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = abs_df,
family = Gamma(link = "log"))
psd_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = psd_df,
family = Gamma(link = "log"))
rel_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = rel_df,
family = Gamma(link = "log"))
Anova(abs_mod, type = "III")
Anova(psd_mod, type = "III")
Anova(rel_mod, type = "III")
rel_mod <- lmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = rel_df)
Anova(abs_mod, type = "III")
Anova(psd_mod, type = "III")
Anova(rel_mod, type = "III")
rel_df
hist(rel_df$Power)
rel_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = rel_df,
family = Gamma(link = "log"))
Anova(rel_mod, type = "III")
Anova(abs_mod, type = "III")
Anova(psd_mod, type = "III")
Anova(rel_mod, type = "III")
abs_df
abs_df %>%
pivot_wider(names_from = Toporaphy, values_from = Power)
abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
abs_df2 <- abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
names(abs_df2)
abs_df2
abs_mod2 <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "delta"))
abs_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "delta"))
abs_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "theta"))
abs_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "alpha"))
abs_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "beta"))
abs_df2 <- abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
abs_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "delta"))
abs_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "theta"))
abs_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "alpha"))
abs_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + (1|ID), data = filter(abs_df2, FreqBand == "beta"))
Anova(abs_modd, type = "III")
Anova(abs_modt, type = "III")
Anova(abs_moda, type = "III")
Anova(abs_modb, type = "III")
abs_df2 <- abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
abs_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "delta"))
abs_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "theta"))
abs_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "alpha"))
abs_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "beta"))
Anova(abs_modd, type = "III")
Anova(abs_modt, type = "III")
Anova(abs_moda, type = "III")
Anova(abs_modb, type = "III")
psd_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "delta"))
```{r predicting spelling errors from EEG}
abs_df2 <- abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
psd_df2 <- psd_df %>%
pivot_wider(names_from = Topography, values_from = Power)
rel_df2 <- rel_df %>%
pivot_wider(names_from = Topography, values_from = Power)
psd_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "delta"))
psd_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "theta"))
psd_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "alpha"))
psd_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "beta"))
Anova(psd_modd, type = "III")
Anova(psd_modt, type = "III")
Anova(psd_moda, type = "III")
Anova(psd_modb, type = "III")
rel_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "delta"))
rel_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "theta"))
rel_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "alpha"))
rel_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "beta"))
Anova(rel_modd, type = "III")
Anova(rel_modt, type = "III")
Anova(rel_moda, type = "III")
Anova(rel_modb, type = "III")
# Main Effects
ECFBdat[[1]] %>%
ggplot(aes(x = Topography, y = Power)) +
geom_boxplot()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(comment = NULL)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(ggplot2)
library(readxl)
library(kableExtra)
library(broom) # Converts regression outputs into dataframes using the tidy() function
library(psych)
library(MASS, exclude = "select") # This package is loaded with QuantPsyc, must exclude "select" or you wont be able to use it.
library(QuantPsyc) # Can use the lm.beta function to calculate the standardized betas
library(car) # To calculate VIF
library(performance) # ICC
library(lme4) #glmer
library(interactions) # interact_plot
library(emmeans)
library(effects) #plot(allEffects(model))
# Set the working directory
Mega <- '\\\\files.times.uh.edu/labs/MIR_Lab/MEGAGRANT/STUDY 1/FINAL_DS'
setwd(Mega)
# load data
demo <- read_excel("Demo/MegaGrant_TBL_Database_Newest_MCh with duration.xlsx")
ARFA <- read.csv("ARFA/ARFA.Spelling.Errors.Scored.csv")
CFIT <- read.csv("CFIT/CFIT.scores.csv")
fftx <- read.csv("EEG/rsEEG/topographyFBAvgPowFFT.csv")
welchx <-  read.csv("EEG/rsEEG/topographyFBAvgPowWelch.csv")
eeg_qs <- read_excel("EEG/rsEEG/Wet_EEG_Cleaning_Final_Report.xlsx")
eeg_mismatch <- read_excel("EEG/rsEEG/MegaGrant_TBL.xlsx")
Medical <- read_excel("Medical_History/TBL_WHOQOL_BRIEF_Medical_S1_S3_DM_06.xlsx",  sheet = "med s1")
# Data cleaning
CFIT <- select(CFIT, ID, IQRS = Raw.Scores)
ARFA <- select(ARFA, ID, TSE = Total_SpellingError)
demo <- demo %>%
select(S1 = `S1 reg-list`,
ID,
Sex,
Age,
Group) %>%
mutate(ID = as.numeric(ID),
Age = as.numeric(Age))
eeg_qs <- select(eeg_qs, File_Name, Start_Recording_Sec, Percent_Remaining, EEG_Rank2, Interpolated_Chan_Num )
eeg_mismatch <- select(eeg_mismatch, ID, RAW)
Medical2 <- select(Medical, ID, HeadTrauma, Health2epilepsy, Health2autism, ADD, Dislexia)
# Create an exclusion variable
Medical2 <- Medical2 %>%
mutate(Traum_Epi_Tism_ADD_Dys = case_when(
HeadTrauma == "Y" | Health2epilepsy == "Y" | Health2autism == "Y" |
ADD == "Y" | Dislexia == "Y" ~ "Y",
TRUE ~ "N"
))
# EEG data cleaning
fftx$ID <- as.numeric(gsub("\\D", "",  sapply(str_split(fftx$filename,"_"), function(x) x[1])))
welchx$ID <- as.numeric(gsub("\\D", "",  sapply(str_split(welchx$filename,"_"), function(x) x[1])))
fftx$Condition <- ifelse(grepl("Close", fftx$filename),"Closed","Open")
welchx$Condition <- ifelse(grepl("Close", welchx$filename),"Closed","Open")
fftx <- select(fftx, -filename)
welchx <- select(welchx, -filename)
names(fftx) <- c(paste0(names(fftx)[1:(length(fftx)-2)],"_fftx"),"ID", "Condition")
names(welchx) <- c(paste0(names(welchx)[1:(length(fftx)-2)],"_welchx"),"ID", "Condition")
# EEG QS cleaning
eeg_qs$Condition <- ifelse(grepl("Close", eeg_qs$File_Name),"Closed","Open")
eeg_qs$ID <- as.numeric(gsub("\\D", "", sapply(str_split(eeg_qs$File_Name,"_"), function(x) x[1])))
eeg_qs <- select(eeg_qs, -File_Name)
eeg_mismatch$ID <- as.numeric(eeg_mismatch$ID)
eeg_mismatch$RAW <- as.numeric(eeg_mismatch$RAW)
### Combine the dataset into one
data <- demo %>%
full_join(CFIT, by = "ID") %>%
full_join(ARFA, by = "ID") %>%
full_join(Medical2, by = "ID") %>%
full_join(eeg_mismatch, by = "ID") %>%
full_join(eeg_qs, by = "ID") %>%
full_join(fftx, by =  c("ID","Condition")) %>%
full_join(welchx, by =  c("ID","Condition"))
# Drop any NA's from the following variables
data <- drop_na(data, ID)
data <- drop_na(data, Condition)
# Keep only unique instances
data <- unique(data)
# Any duplicates? (no duplicates)
dup <- data %>%
group_by(ID) %>%
summarise(duplicates = n())
cat("There are:",sum(dup$duplicates>2),"duplicates in the data")
# Select ID and RAW
datt <- select(data, ID, RAW)
# Identify which files are mismatched
datt <- datt %>%
mutate(mismatch = ifelse(ID != RAW, "Mismatch", "-"))
data <- data %>%
filter(S1 == "+")
dataW <- data %>%
pivot_wider(names_from = Condition, values_from = c(Start_Recording_Sec:Interpolated_Chan_Num, frontal_absdelta_fftx:occipital_relbeta_welchx))
library(mice)
set.seed(123)
# Creates a matrix where all values are 1 off the zero- this means all values can be predicted in the dataset
pred_matrix <- make.predictorMatrix(dataW)
# Change this matrix so only 1's are present in the TSE and IQRS columns- therefore only these variables will be predicted from every other variable in the model.
pred_matrix[, -which(colnames(dataW) %in% c("TSE", "IQRS"))] <- 0
# Indicate which columns (the ones with "TSE" and "IQRS") will go through 'pmm', which means to be predicted
method_vector <- rep("", ncol(dataW))
method_vector[which(colnames(dataW) %in% c("TSE", "IQRS"))] <- "pmm"
# Step 3: Run MICE
imputed_data <- mice(dataW, predictorMatrix = pred_matrix, method = method_vector, m = 5)
# Step 4: Extract the completed dataset
data_imputed <- complete(imputed_data, 1)  # Use the first imputed dataset
# This justifies we can remove ADD
dataW %>%
ggplot(aes(x = ADD, y = TSE)) +
geom_boxplot()
# Indicate our starting sample size
cat("We are starting out with",length(unique(dataW$ID)),"unique ids that have at least one eyes open/closed rsEEG recording\n")
nrow(dataW)
# Express how many subjects are being removed for injury, epilepsy, or autism
cat("We are removing",sum(dataW$Traum_Epi_Tism_ADD_Dys == "Y", na.rm = T),"participants for having head trauma, epilepsy, autism, ADD, or dyslexia \n")
dataW2 <- dataW %>% filter(Traum_Epi_Tism_ADD_Dys != "Y" | is.na(Traum_Epi_Tism_ADD_Dys))
nrow(dataW2)
# Transform back to long (by condition)- must do this to keep the imputed TES scores!
data2 <- filter(data, ID %in% dataW2$ID)
# IMPUTE THE TES VALUES BACK INTO THE ('long format') dataset
data2 <- data2 %>%
left_join(select(data_imputed, ID, TSEi = TSE, IQRSi = IQRS), by ="ID") %>%
select(-c(TSE,IQRS)) %>%
rename(TSE = TSEi, IQRS = IQRSi)
# Obtain the zscores of IQRS, TSE, Age (this must happen first!)
data2 <- data2 %>%
group_by(Condition) %>%
mutate(Agez = c(scale(Age)),
IQRSz = c(scale(IQRS)),
TSEz = c(scale(TSE)))
# Remove subjects for have low nonverbal IQ performance (less than 2 SD)
data3 <- filter(data2, IQRSz > -2 | is.na(IQRSz))
cat("We have", length(unique(data3$ID)),"participants after removing those that performed less than 2 standard deviations below the mean of a non verbal IQ measure\n")
# Remove extremely poor spellers
data4 <- filter(data3, TSEz > -3 | is.na(TSEz))
cat("We have", length(unique(data4$ID)),"participants after removing those that had spelling errors above 3 SD of the mean\n")
# Remove any very old people
data5 <- filter(data4, Agez < 3 | is.na(TSEz))
cat("We have ",length(unique(data5$ID)),"participants after removing those that were 3 SD above the mean in age\n")
# Report the number of unique IDs we have left
cat("This leaves us with data from",length(unique(data5$ID)),"participants with at least one rsEEG recording\n")
# Remove variables we no longer carefor
data6 <- select(data5, -c(S1, HeadTrauma, Health2epilepsy, Health2autism, Traum_Epi_Tism_ADD_Dys, RAW, ADD, Dislexia))
# Create two different datasets
Open <- filter(data6, Condition == "Open")
Closed <- filter(data6, Condition == "Closed")
# See how many EEG files we have for each condition
cat("We have",nrow(Open),"recordings for Eyes Open\n")
cat("We have",nrow(Closed),"recordings for Eyes Closed\n")
# Set thresholds for removing bad EEG recordings after segmentation rejection
EEG_threshold = .7
Open2 <- filter(Open, Percent_Remaining >= EEG_threshold)
Closed2 <- filter(Closed, Percent_Remaining >= EEG_threshold)
cat("We have",nrow(Open2),"recordings for Eyes Open after removing recordings without not enough rsEEG data after seg rejec.\n")
cat("We have",nrow(Closed2),"recordings for Eyes Closed after removing recordings without not enough rsEEG data after seg rejec.\n")
# Set threshold for removing EEG recordings with too many interpolated channels
Interp_threshold = 6
Open2.5 <- filter(Open2, Interpolated_Chan_Num <= Interp_threshold)
Closed2.5 <- filter(Closed2, Interpolated_Chan_Num <= Interp_threshold)
cat("We have",nrow(Open2.5),"recordings for Eyes Open after removing recordings with more than 6 interpolated channels.\n")
cat("We have",nrow(Closed2.5),"recordings for Eyes Closed after removing recordings with more than 6 interpolated channels.\n")
# Set threshold for removing bad EEG recordings after low ranking
EEG_rankThreshold = median(Open$EEG_Rank2) * .7
Open3 <- filter(Open2.5, EEG_Rank2 >= EEG_rankThreshold)
Closed3 <- filter(Closed2.5, EEG_Rank2 >= EEG_rankThreshold)
cat("We have",nrow(Open3),"recordings for Eyes Open after removing low rank EEG after preprocessing.\n")
cat("We have",nrow(Closed3),"recordings for Eyes Closed after removing low rank EEG after preprocessing.\n")
# Check NA's for eyes open dataset
data.frame(lapply(Open3, function(x) sum(is.na(x)))) %>%
stack() %>%
select(EyesOpen_Vars = ind, MissingNum = values)
# Check NA's for eyes closed dataset
data.frame(lapply(Closed3, function(x) sum(is.na(x)))) %>%
stack() %>%
select(EyesClosed_Vars = ind, MissingNum = values)
# Puts it in scientific notation
options(scipen = 0)
# Select continuous variables
Open3 %>%
mutate(Sex = ifelse(Sex == "F",1,0)) %>%
select(Age, Sex, IQRS, TSE, Agez, IQRSz, TSEz) %>%
describe() %>%
round(3) %>%
kbl() %>%
kable_minimal(full_width = F)
# Show their distribution
hist(Open3$Age)
hist(Open3$IQRS)
hist(Open3$TSE)
# Select continuous variables
Closed3 %>%
mutate(Sex = ifelse(Sex == "F",1,0)) %>%
select(Age, Sex, IQRS, TSE, Agez, IQRSz, TSEz) %>%
describe() %>%
round(3) %>%
kbl() %>%
kable_minimal(full_width = F)
# Show their distribution
hist(Closed3$Age)
hist(Closed3$IQRS)
hist(Closed3$TSE)
# Bind the eyes open and eyes closed for this
Open_Closed <- rbind(Open3, Closed3)
# Saving each type of EEG processing in their own datasets
EEGfftx <- select(Open_Closed, ID, frontal_abstheta_fftx:occipital_relbeta_fftx)
EEGWelchx <- select(Open_Closed, ID, frontal_absdelta_welchx:occipital_relbeta_welchx)
# Converting each to long
EEGfftxL <- EEGfftx %>%
pivot_longer(-c(ID, Condition), names_to = "Var", values_to = "Power")
EEGWelchx <- EEGWelchx %>%
pivot_longer(-c(ID, Condition), names_to = "Var", values_to = "Power")
# Introduce more variables
EEGfftxL <- EEGfftxL %>%
mutate(Topography = sapply(str_split(Var,"_"), function(x) x[1]),
FreqBand = sapply(str_split(Var,"_"), function(x) x[2]),
Method = sapply(str_split(Var,"_"), function(x) x[3])) %>%
select(-Var)
EEGWelchx <- EEGWelchx %>%
mutate(Topography = sapply(str_split(Var,"_"), function(x) x[1]),
FreqBand = sapply(str_split(Var,"_"), function(x) x[2]),
Method = sapply(str_split(Var,"_"), function(x) x[3])) %>%
select(-Var)
# Split FB by absolute, relative and PSD
EEGfftxL <- EEGfftxL %>%
mutate(PowerType = substr(FreqBand, 1, 3),
FreqBand = gsub("abs|avg|rel","",FreqBand))
EEGWelchx <- EEGWelchx %>%
mutate(PowerType = substr(FreqBand, 1, 3),
FreqBand = gsub("abs|avg|rel","",FreqBand))
# Join them back together
EEGfftxWelch <- EEGfftxL %>%
full_join(EEGWelchx, by = c("ID", "Power", "Topography", "FreqBand", "Method", "Condition", "PowerType"))
# Remove FFT for now since we do not care for it
EEGfftxWelch <- EEGfftxWelch %>%
filter(Method != "fftx")
# Plot Absolute Power
EEGfftxWelch %>%
filter(PowerType == "abs") %>%
ggplot(aes(x = Topography, y = Power ,fill = FreqBand)) +
geom_boxplot() +
facet_grid(~Condition) +
coord_flip() +
labs(title = "Absolute Power Across Topography, FreqBand, and Condition")
# Plot Power Spectral Density
EEGfftxWelch %>%
filter(PowerType == "avg") %>%
ggplot(aes(x = Topography, y = Power, fill = FreqBand)) +
geom_boxplot() +
facet_grid(~Condition) +
coord_flip() +
labs(title = "PSD Across Topography, FreqBand, and Condition")
## Plot Relative Power
EEGfftxWelch %>%
filter(PowerType == "rel") %>%
ggplot(aes(x = Topography, y = Power, fill = FreqBand)) +
geom_boxplot() +
facet_grid(~Condition) +
coord_flip() +
labs(title = "Relative Power Across Topography, FreqBand, and Condition")
# Ungroup these datasets
Open3 <- ungroup(Open3)
Closed3 <- ungroup(Closed3)
# Run some correlations to check for multicollinearity
Open3_noNa <- Open3 %>% filter(complete.cases(.))
Closed3_noNa <- Closed3 %>% filter(complete.cases(.))
round(cor(select(Open3_noNa, Age, IQRS, TSE)),3) %>%
kbl() %>%
kable_minimal(full_width = F)
round(cor(select(Closed3_noNa, Age, IQRS, TSE)),3) %>%
kbl() %>%
kable_minimal(full_width = F)
#### Eyes Open
# Converting the data into long format to isolate topography and FB
Open3L <- Open3 %>%
select(ID:TSE, frontal_absdelta_welchx:occipital_relbeta_welchx, Agez:TSEz) %>%
pivot_longer(cols= c(frontal_absdelta_welchx:occipital_relbeta_welchx),
names_to = "Var", values_to = "Power")
# Separate 'name' into  two variables
Open3L$Topography <- sapply(str_split(Open3L$Var, "_"), function(x) x[1])
Open3L$FreqBand <- sapply(str_split(Open3L$Var, "_"), function(x) x[2])
Open3L$PowerType <- substr(Open3L$FreqBand, 1,3)
Open3L$FreqBand <- gsub("abs|avg|rel","", Open3L$FreqBand)
Open3L <- select(Open3L, Condition, ID, Sex, Agez, TSEz, Power, Topography, FreqBand, PowerType)
#### Eyes Closed
# Converting the data into long format to isolate topography and FB
Closed3L <- Closed3 %>%
select(ID:TSE, frontal_absdelta_welchx:occipital_relbeta_welchx, Agez:TSEz) %>%
pivot_longer(cols= c(frontal_absdelta_welchx:occipital_relbeta_welchx),
names_to = "Var", values_to = "Power")
# Separate 'name' into  two variables
Closed3L$Topography <- sapply(str_split(Closed3L$Var, "_"), function(x) x[1])
Closed3L$FreqBand <- sapply(str_split(Closed3L$Var, "_"), function(x) x[2])
Closed3L$PowerType <- substr(Closed3L$FreqBand, 1,3)
Closed3L$FreqBand <- gsub("abs|avg|rel","", Closed3L$FreqBand)
Closed3L <- select(Closed3L, Condition, ID, Sex, Agez, TSEz, Power, Topography, FreqBand, PowerType)
# Experimentally testing df with both conditions within them
Both_C <- rbind(Open3L, Closed3L) %>% ungroup()
library(future)
plan(multicore, workers = 12)  # Set number of workers (check your specs); use 'multisession' for windows or 'multicore' for Mac/Linux
abs_df <- filter(Both_C, PowerType == "abs") %>% arrange(ID)
psd_df <- filter(Both_C, PowerType == "avg") %>% arrange(ID)
rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(ID)
### Preliminary analysis ...
abs_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = abs_df,
family = Gamma(link = "log"))
psd_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = psd_df,
family = Gamma(link = "log"))
rel_mod <- glmer(Power ~ FreqBand + Condition + Agez + Topography + TSEz + (1|ID), data = rel_df,
family = Gamma(link = "log"))
Anova(abs_mod, type = "III")
Anova(psd_mod, type = "III")
Anova(rel_mod, type = "III")
abs_df2 <- abs_df %>%
pivot_wider(names_from = Topography, values_from = Power)
psd_df2 <- psd_df %>%
pivot_wider(names_from = Topography, values_from = Power)
rel_df2 <- rel_df %>%
pivot_wider(names_from = Topography, values_from = Power)
abs_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "delta"))
abs_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "theta"))
abs_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "alpha"))
abs_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(abs_df2, FreqBand == "beta"))
psd_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "delta"))
psd_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "theta"))
psd_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "alpha"))
psd_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(psd_df2, FreqBand == "beta"))
rel_modd <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "delta"))
rel_modt <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "theta"))
rel_moda <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "alpha"))
rel_modb <- lmer(TSEz ~ frontal + temporal + parietal + occipital + Agez + (1|ID), data = filter(rel_df2, FreqBand == "beta"))
Anova(rel_modd, type = "III")
Anova(rel_modt, type = "III")
Anova(rel_moda, type = "III")
Anova(rel_modb, type = "III")
library(tictoc)
# Run the model with all potential main effects to be included
tic()
Open_muticoll_mod <-  glmer(Power ~ Agez + Sex + Group + IQRSz + TSEz + Topography + FreqBand + (1|ID), data = Open3L,
family = Gamma(link = "log"))
# Indicate our starting sample size
cat("We are starting out with",length(unique(dataW$ID)),"unique ids that have at least one eyes open/closed rsEEG recording\n")
nrow(dataW)
# Express how many subjects are being removed for injury, epilepsy, or autism
cat("We are removing",sum(dataW$Traum_Epi_Tism_ADD_Dys == "Y", na.rm = T),"participants for having head trauma, epilepsy, autism, ADD, or dyslexia \n")
dataW2 <- dataW %>% filter(Traum_Epi_Tism_ADD_Dys != "Y" | is.na(Traum_Epi_Tism_ADD_Dys))
nrow(dataW2)
# Transform back to long (by condition)- must do this to keep the imputed TES scores!
data2 <- filter(data, ID %in% dataW2$ID)
# IMPUTE THE TES VALUES BACK INTO THE ('long format') dataset
data2 <- data2 %>%
left_join(select(data_imputed, ID, TSEi = TSE, IQRSi = IQRS), by ="ID") %>%
select(-c(TSE,IQRS)) %>%
rename(TSE = TSEi, IQRS = IQRSi)
# Obtain the zscores of IQRS, TSE, Age (this must happen first!)
data2 <- data2 %>%
group_by(Condition) %>%
mutate(Agez = c(scale(Age)),
IQRSz = c(scale(IQRS)),
TSEz = c(scale(TSE)))
# Remove subjects for have low nonverbal IQ performance (less than 2 SD)
data3 <- filter(data2, IQRSz > -2 | is.na(IQRSz))
cat("We have", length(unique(data3$ID)),"participants after removing those that performed less than 2 standard deviations below the mean of a non verbal IQ measure\n")
# Remove extremely poor spellers
data4 <- filter(data3, TSEz > -3 | is.na(TSEz))
cat("We have", length(unique(data4$ID)),"participants after removing those that had spelling errors above 3 SD of the mean\n")
# Remove any very old people
data5 <- filter(data4, Agez < 3 | is.na(TSEz))
cat("We have ",length(unique(data5$ID)),"participants after removing those that were 3 SD above the mean in age\n")
# Report the number of unique IDs we have left
cat("This leaves us with data from",length(unique(data5$ID)),"participants with at least one rsEEG recording\n")
Open3L
library(tictoc)
# Run the model with all potential main effects to be included
tic()
Open_muticoll_mod <-  glmer(Power ~ Agez + Sex  + IQRSz + TSEz + Topography + FreqBand + (1|ID), data = Open3L,
family = Gamma(link = "log"))
abs_df
abs_mod <- glmer(Power ~ Condition + Agez + TSEz * FreqBand * Topography + (1|ID), data = Open3L,
family = Gamma(link = "log"))
abs_mod <- glmer(Power ~ Condition + Agez + TSEz * FreqBand * Topography + (1|ID), data = abs_df,
family = Gamma(link = "log"))
library(future)
plan(multicore, workers = 12)  # Set number of workers (check your specs); use 'multisession' for windows or 'multicore' for Mac/Linux
abs_df <- filter(Both_C, PowerType == "abs") %>% arrange(ID)
psd_df <- filter(Both_C, PowerType == "avg") %>% arrange(ID)
rel_df <- filter(Both_C, PowerType == "rel") %>% arrange(ID)
# Run the model
abs_mod <- glmer(Power ~ Condition + Agez + TSEz * FreqBand * Topography + (1|ID), data = abs_df,
family = Gamma(link = "log"))
# Omnibust Test
Anova(abs_mod, type = "III")
# Run the model
psd_mod <- glmer(Power ~ Condition + Agez + TSEz * FreqBand * Topography + (1|ID), data = psd_df,
family = Gamma(link = "log"))
# Omnibust Test
Anova(psd_mod, type = "III")
# Run the model
rel_mod <- glmer(Power ~ Condition + Agez + TSEz * FreqBand * Topography + (1|ID), data = rel_df,
family = Gamma(link = "log"))
# Omnibust Test
Anova(rel_mod, type = "III")
# Omnibust Test
Anova(psd_mod, type = "III")
